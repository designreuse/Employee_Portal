<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-2.0.2.xsd">

	<!-- Configure Spring Security -->
	<security:http entry-point-ref="CustomAuthenticationEntryPoint">
	    <security:intercept-url pattern="/app/login*" filters="none"/>    
	    <security:intercept-url pattern="/app/createNewUser*" access="ROLE_ANONYMOUS"/>  
	    <security:intercept-url pattern="/app/forgotPassword*" access="ROLE_ANONYMOUS"/>  
	    <security:intercept-url pattern="/scripts/*" filters="none"/>
	    <security:intercept-url pattern="/resources/*" filters="none"/> 
	    <security:intercept-url pattern="/images/*" filters="none"/>  
	    <security:intercept-url pattern="/styles/*" filters="none"/> 
	    <security:intercept-url pattern="/app/redirect*" filters="none"/>  
	    <security:intercept-url pattern="/WebHelp/**" filters="none"/>
        <security:intercept-url pattern="/**" access="ROLE_USER" />
        <security:anonymous/>
        <security:logout logout-success-url="/app/login"/>
	</security:http>
	
	 <security:authentication-provider>
	 	<security:password-encoder hash="sha-256"/>    
        <security:jdbc-user-service data-source-ref="datasource" 
        							users-by-username-query="select usrname, usrpswd as 'password', CASE WHEN lk_pswd = 'N' AND (bea_users.tmp_dts ='' OR DATEDIFF (HH, convert(datetime, bea_users.tmp_dts), GETDATE()) &lt; 24 ) then 'true' when lk_pswd = 'Y' OR usrpswd='' then 'false' END as 'enabled' from BEA_USERS where usrname= UPPER ( ? )"
        							authorities-by-username-query="select usrname, 'ROLE_USER' as authority from BEA_USERS where usrname=?"/>
    </security:authentication-provider>

	<security:authentication-manager alias="authenticationManager"/>
	
	<bean id="customizedFormLoginFilter" class="net.esc20.txeis.EmployeeAccess.security.CustomAuthenticationProcessingFilter" >
		<security:custom-filter position="AUTHENTICATION_PROCESSING_FILTER"/><!--replace the default one-->
		<constructor-arg><ref bean="authorityDao"/></constructor-arg>
		<constructor-arg><ref bean="userDao"/></constructor-arg>
		<constructor-arg><ref bean="passwordDao"/></constructor-arg>
		<constructor-arg><ref bean="optionsDao"/></constructor-arg>
		<property name="defaultTargetUrl" value="/app/main"/><!--After a successful login, the user will be taken to this page-->
		<property name="authenticationFailureUrl" value="/app/login?login_error=1" /><!--Authentication failed? take him to error page-->
		<property name="authenticationManager" ref="authenticationManager"/> <!--Here it is the custom authenticationManager, login magic goes here -->
		<property name="allowSessionCreation" value="true" /> <!--Allow the application to create sessions-->
		<property name="alwaysUseDefaultTargetUrl" value="true"/>
	</bean>
	
	<bean id="databaseFilter" class="net.esc20.txeis.EmployeeAccess.security.DatabaseNameFilter" >
		<security:custom-filter after="SERVLET_API_SUPPORT_FILTER" />
	</bean>
	
	<bean id="CustomAuthenticationEntryPoint" class="net.esc20.txeis.EmployeeAccess.security.CustomAuthenticationEntryPoint" >
	    <property name="loginFormUrl" value="/app/login"/>
	    <property name="forceHttps" value="true"/>
	</bean>
</beans>